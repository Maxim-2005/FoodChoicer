import telebot
import sqlite3

from telebot import types
from config import token

bot = telebot.TeleBot(token)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –±–ª—é–¥
dishes_db = {
    "breakfast": ["–û–º–ª–µ—Ç", "–ö–∞—à–∞", "–ë—É—Ç–µ—Ä–±—Ä–æ–¥—ã"],
    "lunch": ["–°—É–ø", "–ü–ª–æ–≤", "–ì—Ä–µ—á–∫–∞ —Å –∫—É—Ä–∏—Ü–µ–π"],
    "dinner": ["–°–∞–ª–∞—Ç", "–†—ã–±–∞", "–û–≤–æ—â–Ω–æ–µ —Ä–∞–≥—É"]
}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
def show_main_menu(chat_id, message_id=None):
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –±–ª—é–¥–æ", callback_data="choose_meal"),
        types.InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–ª—é–¥", callback_data="all_dishes")
    )
    markup.add(types.InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data="help"))
    
    if message_id:
        try:
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=markup
            )
        except:
            bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)
    else:
        bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    show_main_menu(message.chat.id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    bot.reply_to(message, "–≠—Ç–æ –≤—ã–≥–ª—è–¥–∏—Ç –∞–ø–ø–µ—Ç–∏—Ç–Ω–æ üòä")

# –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
def show_meal_types(chat_id, message_id=None):
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞–∫", callback_data="breakfast"),
        types.InlineKeyboardButton("–û–±–µ–¥", callback_data="lunch"),
        types.InlineKeyboardButton("–£–∂–∏–Ω", callback_data="dinner")
    )
    markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    
    send_message(chat_id, message_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏:", markup)

# –ú–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Å–ø–∏—Å–∫–∞ –±–ª—é–¥
def show_categories_menu(chat_id, message_id=None):
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞–∫", callback_data="list_breakfast"),
        types.InlineKeyboardButton("–û–±–µ–¥", callback_data="list_lunch"),
        types.InlineKeyboardButton("–£–∂–∏–Ω", callback_data="list_dinner")
    )
    markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    
    send_message(chat_id, message_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–ª—é–¥:", markup)

# –°–ø–∏—Å–æ–∫ –±–ª—é–¥ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
def show_dishes_list(chat_id, meal_type, message_id=None, additional_text=None):
    dishes = "\n".join(f"‚Ä¢ {dish}" for dish in dishes_db[meal_type])
    text = f"üçΩÔ∏è –ë–ª—é–¥–∞ ({meal_type}):\n{dishes}"
    if additional_text:
        text = f"{additional_text}\n\n{text}"
    
    markup = types.InlineKeyboardMarkup()
    # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
    markup.row(
        types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data=f"add_{meal_type}"),
        types.InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å", callback_data=f"del_{meal_type}")
    )
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories"))
    
    send_message(chat_id, message_id, text, markup)

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
def send_message(chat_id, message_id, text, markup):
    try:
        if message_id:
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=text,
                reply_markup=markup
            )
        else:
            bot.send_message(chat_id, text, reply_markup=markup)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        bot.send_message(chat_id, text, reply_markup=markup)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª—é–¥–∞
def add_dish(message, meal_type):
    if message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
        show_dishes_list(message.chat.id, meal_type, message.message_id - 1, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return
    
    dish = message.text.strip()
    if dish in dishes_db[meal_type]:
        show_dishes_list(message.chat.id, meal_type, message.message_id - 1, f"–ë–ª—é–¥–æ '{dish}' —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ!")
    else:
        dishes_db[meal_type].append(dish)
        show_dishes_list(message.chat.id, meal_type, message.message_id - 1, f"–ë–ª—é–¥–æ '{dish}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ '{meal_type}'!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    try:
        bot.answer_callback_query(call.id)
        
        if call.data == "back_to_main":
            show_main_menu(call.message.chat.id, call.message.message_id)
        elif call.data == "back_to_categories":
            show_categories_menu(call.message.chat.id, call.message.message_id)
        elif call.data == "choose_meal":
            show_meal_types(call.message.chat.id, call.message.message_id)
        elif call.data == "all_dishes":
            show_categories_menu(call.message.chat.id, call.message.message_id)
        elif call.data == "help":
            markup = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"))
            send_message(call.message.chat.id, call.message.message_id, 
                       "üìå –ü–æ–º–æ—â—å:\n\n1. –í—ã–±–µ—Ä–∏—Ç–µ '–í—ã–±—Ä–∞—Ç—å –±–ª—é–¥–æ' –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–ª—é–¥' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n3. –î–æ–±–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏ –±–ª—é–¥–∞ –∏–ª–∏ —É–¥–∞–ª—è–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ", 
                       markup)
        elif call.data in ["breakfast", "lunch", "dinner"]:
            bot.send_message(call.message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {call.data}!")
        elif call.data.startswith("list_"):
            show_dishes_list(call.message.chat.id, call.data.split("_")[1], call.message.message_id)
        elif call.data.startswith("add_"):
            msg = bot.send_message(
                call.message.chat.id,
                f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ '{call.data.split('_')[1]}':\n(–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã)",
                reply_markup=types.ForceReply()
            )
            bot.register_next_step_handler(msg, lambda m: add_dish(m, call.data.split('_')[1]))
        elif call.data.startswith("del_"):
            meal_type = call.data.split("_")[1]
            if not dishes_db[meal_type]:
                show_dishes_list(call.message.chat.id, meal_type, call.message.message_id, "–°–ø–∏—Å–æ–∫ –±–ª—é–¥ –ø—É—Å—Ç!")
                return
                
            markup = types.InlineKeyboardMarkup()
            for dish in dishes_db[meal_type]:
                markup.add(types.InlineKeyboardButton(f"‚ùå {dish}", callback_data=f"confirm_del_{meal_type}_{dish}"))
            markup.add(
                types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"list_{meal_type}"),
                types.InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
            )
            send_message(call.message.chat.id, call.message.message_id, "–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", markup)
        elif call.data.startswith("confirm_del_"):
            _, _, meal_type, dish = call.data.split("_", 3)
            dishes_db[meal_type].remove(dish)
            show_dishes_list(call.message.chat.id, meal_type, call.message.message_id, f"–ë–ª—é–¥–æ '{dish}' —É–¥–∞–ª–µ–Ω–æ!")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")

bot.polling(non_stop=True)