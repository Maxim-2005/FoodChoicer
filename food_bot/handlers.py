import random
from telebot import types
from telebot.apihelper import ApiTelegramException
from keyboard_utils import (
    create_main_menu,
    create_categories_menu,
    create_dishes_menu,
    create_delete_menu,
    create_random_dish_menu
)
from database import Database

db = Database()

def handle_start(bot, message):
    bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=create_main_menu())

def handle_help(bot, message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    bot.send_message(
        message.chat.id,
        "üìå –ü–æ–º–æ—â—å:\n\n1. '–í—ã–±—Ä–∞—Ç—å –±–ª—é–¥–æ' - —Å–ª—É—á–∞–π–Ω–æ–µ –±–ª—é–¥–æ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n2. '–°–ø–∏—Å–æ–∫ –±–ª—é–¥' - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ\n3. –î–æ–±–∞–≤–ª—è–π—Ç–µ/—É–¥–∞–ª—è–π—Ç–µ –±–ª—é–¥–∞",
        reply_markup=markup
    )

def handle_photo(bot, message):
    bot.reply_to(message, "–≠—Ç–æ –≤—ã–≥–ª—è–¥–∏—Ç –∞–ø–ø–µ—Ç–∏—Ç–Ω–æ üòä")

def handle_add_dish(bot, message, category_id):
    if message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
        dishes = db.get_dishes(get_category_name(category_id))
        dishes_text = "\n".join(f"‚Ä¢ {dish[1]}" for dish in dishes) if dishes else "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç"
        bot.send_message(
            message.chat.id,
            f"‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ\n\nüçΩÔ∏è –ë–ª—é–¥–∞ ({get_category_name(category_id)}):\n{dishes_text}",
            reply_markup=create_dishes_menu(category_id)
        )
        return

    dish_name = message.text.strip()
    if not dish_name:
        bot.send_message(message.chat.id, "–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        return

    if db.add_dish(get_category_name(category_id), dish_name):
        dishes = db.get_dishes(get_category_name(category_id))
        dishes_text = "\n".join(f"‚Ä¢ {dish[1]}" for dish in dishes) if dishes else "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç"
        bot.send_message(
            message.chat.id,
            f"‚úÖ –ë–ª—é–¥–æ '{dish_name}' –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\nüçΩÔ∏è –ë–ª—é–¥–∞ ({get_category_name(category_id)}):\n{dishes_text}",
            reply_markup=create_dishes_menu(category_id)
        )
    else:
        bot.send_message(message.chat.id, f"‚ùå –ë–ª—é–¥–æ '{dish_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")

def get_category_name(category_id):
    cursor = db.conn.cursor()
    cursor.execute("SELECT name FROM categories WHERE id = ?", (category_id,))
    return cursor.fetchone()[0]

def get_dish_name(dish_id):
    cursor = db.conn.cursor()
    cursor.execute("SELECT name FROM dishes WHERE id = ?", (dish_id,))
    return cursor.fetchone()[0]

def handle_callback(bot, call):
    bot.answer_callback_query(call.id)
    chat_id = call.message.chat.id
    message_id = call.message.message_id

    if call.data == "back_to_main":
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text="üçΩÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=create_main_menu()
        )

    elif call.data == "back_to_categories":
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text="üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=create_categories_menu(menu_type="list")
        )

    elif call.data == "choose_meal":
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text="üç≥ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –±–ª—é–¥–∞:",
            reply_markup=create_categories_menu(menu_type="random")
        )

    elif call.data == "all_dishes":
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text="üìã –°–ø–∏—Å–æ–∫ –±–ª—é–¥ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:",
            reply_markup=create_categories_menu(menu_type="list")
        )

    elif call.data.startswith("random_"):
        category_id = int(call.data.split("_")[1])
        category_name = get_category_name(category_id)
        dishes = db.get_dishes(category_name)

        if not dishes:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="choose_meal"))
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=f"üçΩÔ∏è –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}' –ø–æ–∫–∞ –Ω–µ—Ç –±–ª—é–¥",
                reply_markup=markup
            )
            return

        random_dish = random.choice(dishes)[1]
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=f"üé≤ –°–ª—É—á–∞–π–Ω–æ–µ –±–ª—é–¥–æ –∏–∑ '{category_name}':\n\n<b>{random_dish}</b>",
            parse_mode="HTML",
            reply_markup=create_random_dish_menu(category_id)
        )

    elif call.data.startswith("list_"):
        category_id = int(call.data.split("_")[1])
        category_name = get_category_name(category_id)
        dishes = db.get_dishes(category_name)
        dishes_text = "\n".join(f"‚Ä¢ {dish[1]}" for dish in dishes) if dishes else "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç"
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=f"üçΩÔ∏è –ë–ª—é–¥–∞ ({category_name}):\n{dishes_text}",
            reply_markup=create_dishes_menu(category_id)
        )

    elif call.data.startswith("add_"):
        category_id = int(call.data.split("_")[1])
        msg = bot.send_message(
            chat_id,
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ '{get_category_name(category_id)}':\n(–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞')",
            reply_markup=types.ForceReply()
        )
        bot.register_next_step_handler(msg, lambda m: handle_add_dish(bot, m, category_id))

    elif call.data.startswith("del_"):
        category_id = int(call.data.split("_")[1])
        category_name = get_category_name(category_id)
        dishes = db.get_dishes(category_name)

        if not dishes:
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=f"üçΩÔ∏è –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}' –Ω–µ—Ç –±–ª—é–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                reply_markup=create_dishes_menu(category_id)
            )
            return

        bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=f"–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ '{category_name}':",
            reply_markup=create_delete_menu(dishes, category_id)
        )

    elif call.data.startswith("confirm_del_"):
        _, _, category_id_str, dish_id_str = call.data.split("_")
        category_id = int(category_id_str)
        dish_id = int(dish_id_str)

        category_name = get_category_name(category_id)
        dish_name = get_dish_name(dish_id)

        if db.remove_dish(category_name, dish_name):
            dishes = db.get_dishes(category_name)
            dishes_text = "\n".join(f"‚Ä¢ {dish[1]}" for dish in dishes) if dishes else "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç"
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=f"‚úÖ –ë–ª—é–¥–æ '{dish_name}' —É–¥–∞–ª–µ–Ω–æ!\n\nüçΩÔ∏è –ë–ª—é–¥–∞ ({category_name}):\n{dishes_text}",
                reply_markup=create_dishes_menu(category_id)
            )
        else:
            bot.answer_callback_query(call.id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –±–ª—é–¥–æ '{dish_name}'", show_alert=True)

    else:
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", show_alert=True)
